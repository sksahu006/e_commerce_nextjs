// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  username        String            @unique
  email           String            @unique
  passwordHash    String
  isAdmin         Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  orders          Order[]
  reviews         Review[]
  shippingAddresses ShippingAddress[]
  cart            Cart?
}

model Product {
  id              String            @id @default(uuid())
  name            String
  slug            String            @unique
  image           String
  description     String?
  basePrice       Decimal           @db.Decimal(10, 2)
  discountPrice   Decimal?          @db.Decimal(10, 2)
  featured        Boolean           @default(false)
  status          String            @default("draft")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  categories      ProductCategory[]
  variants        ProductVariant[]
  reviews         Review[]
  cartItems       CartItem[]
}

model Category {
  id              String            @id @default(uuid())
  name            String            @unique
  description     String?
  products        ProductCategory[]
}

model ProductCategory {
  product         Product           @relation(fields: [productId], references: [id])
  productId       String
  category        Category          @relation(fields: [categoryId], references: [id])
  categoryId      String

  @@id([productId, categoryId])
}

model Size {
  id              String            @id @default(uuid())
  name            String            @unique
  variants        ProductVariant[]
}

model Color {
  id              String            @id @default(uuid())
  name            String            @unique
  hexCode         String            @unique
  variants        ProductVariant[]
}

model ProductVariant {
  id              String            @id @default(uuid())
  product         Product           @relation(fields: [productId], references: [id])
  productId       String
  size            Size              @relation(fields: [sizeId], references: [id])
  sizeId          String
  color           Color             @relation(fields: [colorId], references: [id])
  colorId         String
  stockQuantity   Int               @default(0)
  additionalPrice Decimal           @default(0) @db.Decimal(10, 2)
  orderItems      OrderItem[]
  cartItems       CartItem[]

  @@unique([productId, sizeId, colorId])
}

model Order {
  id              String            @id @default(uuid())
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  status          String
  totalAmount     Decimal           @db.Decimal(10, 2)
  quantity        Int
  trackingNumber  String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  orderItems      OrderItem[]
}

model OrderItem {
  id              String            @id @default(uuid())
  order           Order             @relation(fields: [orderId], references: [id])
  orderId         String
  variant         ProductVariant    @relation(fields: [variantId], references: [id])
  variantId       String
  quantity        Int
  pricePerUnit    Decimal           @db.Decimal(10, 2)
}

model ShippingAddress {
  id              String            @id @default(uuid())
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  fullName        String
  addressLine1    String
  addressLine2    String?
  city            String
  state           String
  postalCode      String
  country         String
  phoneNumber     String?
  default         Boolean           @default(false)
}

model Review {
  id              String            @id @default(uuid())
  product         Product           @relation(fields: [productId], references: [id])
  productId       String
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  title           String?
  rating          Int
  comment         String?
  createdAt       DateTime          @default(now())
}

model Coupon {
  id              String            @id @default(uuid())
  code            String            @unique
  discountPercent Decimal           @db.Decimal(5, 2)
  validFrom       DateTime
  validTo         DateTime
  isActive        Boolean           @default(true)
  used            Boolean           @default(false)
}

model Cart {
  id              String            @id @default(uuid())
  user            User              @relation(fields: [userId], references: [id])
  userId          String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  cartItems       CartItem[]
}

model CartItem {
  id              String            @id @default(uuid())
  cart            Cart              @relation(fields: [cartId], references: [id])
  cartId          String
  variant         ProductVariant    @relation(fields: [variantId], references: [id])
  variantId       String
  quantity        Int
  product         Product           @relation(fields: [productId], references: [id])
  productId       String

  @@unique([cartId, variantId])
}